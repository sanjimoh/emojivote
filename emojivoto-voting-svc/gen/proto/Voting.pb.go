// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: proto/Voting.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VotingResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shortcode string `protobuf:"bytes,1,opt,name=Shortcode,proto3" json:"Shortcode,omitempty"`
	Votes     int32  `protobuf:"varint,2,opt,name=Votes,proto3" json:"Votes,omitempty"`
}

func (x *VotingResult) Reset() {
	*x = VotingResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_Voting_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VotingResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VotingResult) ProtoMessage() {}

func (x *VotingResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_Voting_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VotingResult.ProtoReflect.Descriptor instead.
func (*VotingResult) Descriptor() ([]byte, []int) {
	return file_proto_Voting_proto_rawDescGZIP(), []int{0}
}

func (x *VotingResult) GetShortcode() string {
	if x != nil {
		return x.Shortcode
	}
	return ""
}

func (x *VotingResult) GetVotes() int32 {
	if x != nil {
		return x.Votes
	}
	return 0
}

type VoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VoteRequest) Reset() {
	*x = VoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_Voting_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteRequest) ProtoMessage() {}

func (x *VoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_Voting_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteRequest.ProtoReflect.Descriptor instead.
func (*VoteRequest) Descriptor() ([]byte, []int) {
	return file_proto_Voting_proto_rawDescGZIP(), []int{1}
}

type VoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VoteResponse) Reset() {
	*x = VoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_Voting_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteResponse) ProtoMessage() {}

func (x *VoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_Voting_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteResponse.ProtoReflect.Descriptor instead.
func (*VoteResponse) Descriptor() ([]byte, []int) {
	return file_proto_Voting_proto_rawDescGZIP(), []int{2}
}

type ResultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResultsRequest) Reset() {
	*x = ResultsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_Voting_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultsRequest) ProtoMessage() {}

func (x *ResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_Voting_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultsRequest.ProtoReflect.Descriptor instead.
func (*ResultsRequest) Descriptor() ([]byte, []int) {
	return file_proto_Voting_proto_rawDescGZIP(), []int{3}
}

type ResultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*VotingResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ResultsResponse) Reset() {
	*x = ResultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_Voting_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultsResponse) ProtoMessage() {}

func (x *ResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_Voting_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultsResponse.ProtoReflect.Descriptor instead.
func (*ResultsResponse) Descriptor() ([]byte, []int) {
	return file_proto_Voting_proto_rawDescGZIP(), []int{4}
}

func (x *ResultsResponse) GetResults() []*VotingResult {
	if x != nil {
		return x.Results
	}
	return nil
}

var File_proto_Voting_proto protoreflect.FileDescriptor

var file_proto_Voting_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x22, 0x42, 0x0a, 0x0c, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x0d, 0x0a, 0x0b, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x10, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x47, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x32, 0xd8, 0x38, 0x0a, 0x0d, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x70, 0x12, 0x19,
	0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x56, 0x6f, 0x74, 0x65, 0x4a, 0x6f, 0x79,
	0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x56, 0x6f, 0x74, 0x65, 0x53,
	0x75, 0x6e, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x0b, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x78, 0x65, 0x64, 0x12,
	0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f,
	0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x1c, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74,
	0x75, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x54, 0x6f, 0x6e, 0x67, 0x75, 0x65, 0x57, 0x69, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x45, 0x79, 0x65, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a,
	0x12, 0x56, 0x6f, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x4d, 0x6f, 0x75, 0x74, 0x68, 0x46,
	0x61, 0x63, 0x65, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x56, 0x6f,
	0x74, 0x65, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x19, 0x2e, 0x65,
	0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x56, 0x6f, 0x74, 0x65, 0x4e, 0x65, 0x72, 0x64, 0x46,
	0x61, 0x63, 0x65, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x56, 0x6f,
	0x74, 0x65, 0x47, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f,
	0x0a, 0x16, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x6b, 0x75, 0x6c, 0x6c, 0x41, 0x6e, 0x64, 0x43, 0x72,
	0x6f, 0x73, 0x73, 0x62, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69,
	0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x49, 0x0a, 0x10, 0x56, 0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x45, 0x79, 0x65, 0x73,
	0x43, 0x61, 0x74, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x56, 0x6f,
	0x74, 0x65, 0x48, 0x65, 0x61, 0x72, 0x4e, 0x6f, 0x45, 0x76, 0x69, 0x6c, 0x12, 0x19, 0x2e, 0x65,
	0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x65, 0x4e, 0x6f,
	0x45, 0x76, 0x69, 0x6c, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x56,
	0x6f, 0x74, 0x65, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x4e, 0x6f, 0x45, 0x76, 0x69, 0x6c, 0x12, 0x19,
	0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x56, 0x6f, 0x74, 0x65, 0x42, 0x6f, 0x79,
	0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x47,
	0x69, 0x72, 0x6c, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x56, 0x6f,
	0x74, 0x65, 0x4d, 0x61, 0x6e, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09,
	0x56, 0x6f, 0x74, 0x65, 0x57, 0x6f, 0x6d, 0x61, 0x6e, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x45, 0x0a, 0x0c, 0x56, 0x6f, 0x74, 0x65, 0x4f, 0x6c, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x6e,
	0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x56, 0x6f, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69,
	0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x0d, 0x56, 0x6f, 0x74, 0x65, 0x47, 0x75, 0x61, 0x72, 0x64, 0x73, 0x6d, 0x61, 0x6e,
	0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x19, 0x56, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x4d, 0x61, 0x6e, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x56,
	0x6f, 0x74, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x45, 0x0a, 0x0c, 0x56, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x56, 0x6f, 0x74, 0x65, 0x4d,
	0x61, 0x6e, 0x49, 0x6e, 0x54, 0x75, 0x78, 0x65, 0x64, 0x6f, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f,
	0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x11, 0x56, 0x6f, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x56, 0x65, 0x69, 0x6c, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a,
	0x0c, 0x56, 0x6f, 0x74, 0x65, 0x4d, 0x72, 0x73, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x12, 0x19, 0x2e,
	0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69,
	0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x61, 0x6e, 0x74,
	0x61, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65,
	0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x56, 0x6f, 0x74, 0x65,
	0x54, 0x75, 0x72, 0x6b, 0x65, 0x79, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a,
	0x0a, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x12, 0x19, 0x2e, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x56, 0x6f, 0x74, 0x65, 0x4e, 0x6f, 0x47, 0x6f, 0x6f, 0x64,
	0x57, 0x6f, 0x6d, 0x61, 0x6e, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0b,
	0x56, 0x6f, 0x74, 0x65, 0x4f, 0x6b, 0x57, 0x6f, 0x6d, 0x61, 0x6e, 0x12, 0x19, 0x2e, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x61, 0x69, 0x73, 0x69, 0x6e,
	0x67, 0x48, 0x61, 0x6e, 0x64, 0x57, 0x6f, 0x6d, 0x61, 0x6e, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f,
	0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x46, 0x0a, 0x0d, 0x56, 0x6f, 0x74, 0x65, 0x42, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x6e, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x56, 0x6f, 0x74,
	0x65, 0x4d, 0x61, 0x6e, 0x46, 0x61, 0x63, 0x65, 0x70, 0x61, 0x6c, 0x6d, 0x69, 0x6e, 0x67, 0x12,
	0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f,
	0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x56, 0x6f, 0x74, 0x65, 0x57, 0x6f,
	0x6d, 0x61, 0x6e, 0x53, 0x68, 0x72, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x2e, 0x65,
	0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x56, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x57, 0x6f, 0x6d, 0x61, 0x6e, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47,
	0x0a, 0x0e, 0x56, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e,
	0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x56, 0x6f, 0x74, 0x65, 0x52,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x0a, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x19,
	0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x56, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x6e,
	0x44, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49,
	0x0a, 0x10, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x57, 0x6f, 0x6d,
	0x65, 0x6e, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x56, 0x6f, 0x74,
	0x65, 0x52, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69,
	0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x42, 0x0a, 0x09, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x65,
	0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x56, 0x6f, 0x74, 0x65, 0x47, 0x6f, 0x6c, 0x66, 0x69,
	0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e,
	0x56, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x72, 0x66, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x12, 0x19,
	0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x56, 0x6f, 0x74, 0x65, 0x42, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x6e, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f,
	0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x46, 0x0a, 0x0d, 0x56, 0x6f, 0x74, 0x65, 0x42, 0x69, 0x6b, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x6e, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x56, 0x6f, 0x74,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x70, 0x32, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x49, 0x0a, 0x10, 0x56, 0x6f, 0x74, 0x65, 0x56, 0x75, 0x6c, 0x63, 0x61, 0x6e, 0x53, 0x61,
	0x6c, 0x75, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x56,
	0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69,
	0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x0e, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x48, 0x61, 0x6e,
	0x64, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65,
	0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x56, 0x6f, 0x74, 0x65,
	0x54, 0x68, 0x75, 0x6d, 0x62, 0x73, 0x75, 0x70, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69,
	0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x41, 0x0a, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x76, 0x65, 0x12, 0x19, 0x2e, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x70, 0x12, 0x19,
	0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x61, 0x69,
	0x73, 0x65, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69,
	0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x41, 0x0a, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x61, 0x79, 0x12, 0x19, 0x2e, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x6f, 0x67, 0x12, 0x19, 0x2e,
	0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69,
	0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x74, 0x32,
	0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x56, 0x6f, 0x74, 0x65, 0x50,
	0x69, 0x67, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x56, 0x6f, 0x74,
	0x65, 0x48, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x69, 0x63, 0x6b, 0x12, 0x19,
	0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x6e, 0x61,
	0x69, 0x6c, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x56, 0x6f, 0x74,
	0x65, 0x42, 0x61, 0x63, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a,
	0x09, 0x56, 0x6f, 0x74, 0x65, 0x50, 0x69, 0x7a, 0x7a, 0x61, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f,
	0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x41, 0x0a, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x63, 0x6f, 0x12, 0x19, 0x2e,
	0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69,
	0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x56, 0x6f, 0x74, 0x65, 0x42, 0x75, 0x72, 0x72,
	0x69, 0x74, 0x6f, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x61, 0x6d, 0x65, 0x6e, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x0c, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x6f, 0x75, 0x67, 0x68, 0x6e, 0x75, 0x74, 0x12, 0x19,
	0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6d, 0x70, 0x61, 0x67, 0x6e, 0x65, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a,
	0x11, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x72, 0x6f, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x72, 0x69,
	0x6e, 0x6b, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x56, 0x6f, 0x74,
	0x65, 0x42, 0x65, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x10,
	0x56, 0x6f, 0x74, 0x65, 0x54, 0x75, 0x6d, 0x62, 0x6c, 0x65, 0x72, 0x47, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x56, 0x6f, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a,
	0x0a, 0x11, 0x56, 0x6f, 0x74, 0x65, 0x42, 0x65, 0x61, 0x63, 0x68, 0x55, 0x6d, 0x62, 0x72, 0x65,
	0x6c, 0x6c, 0x61, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x56, 0x6f,
	0x74, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x6e, 0x6f, 0x77, 0x12, 0x19,
	0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x6d,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x56,
	0x6f, 0x74, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x63, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x56, 0x6f, 0x74,
	0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x56, 0x6f, 0x74, 0x65, 0x52,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09,
	0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x32, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x50, 0x0a, 0x17, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x6e, 0x42, 0x65, 0x68, 0x69, 0x6e,
	0x64, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x19, 0x2e, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x57,
	0x69, 0x74, 0x68, 0x52, 0x61, 0x69, 0x6e, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f,
	0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x49, 0x0a, 0x10, 0x56, 0x6f, 0x74, 0x65, 0x4a, 0x61, 0x63, 0x6b, 0x4f, 0x4c, 0x61,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0b,
	0x56, 0x6f, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x61, 0x64, 0x61, 0x12, 0x19,
	0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x72, 0x6f,
	0x70, 0x68, 0x79, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x56, 0x6f,
	0x74, 0x65, 0x49, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69,
	0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x42, 0x0a, 0x09, 0x56, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x65,
	0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x56, 0x6f, 0x74, 0x65, 0x46, 0x61, 0x78, 0x12, 0x19,
	0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x42, 0x75, 0x6c,
	0x62, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65,
	0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x56, 0x6f, 0x74, 0x65,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x57, 0x69, 0x74, 0x68, 0x57, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x19,
	0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x72, 0x79,
	0x73, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x6c, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69,
	0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x0c, 0x56, 0x6f, 0x74, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12,
	0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f,
	0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x72, 0x6f, 0x62, 0x61, 0x6e, 0x67, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x40, 0x0a, 0x07, 0x56, 0x6f, 0x74, 0x65, 0x31, 0x30, 0x30, 0x12, 0x19, 0x2e, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a,
	0x0a, 0x11, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x64, 0x53, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x19, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x56, 0x6f,
	0x74, 0x65, 0x46, 0x6c, 0x6f, 0x70, 0x70, 0x79, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x19, 0x2e, 0x65,
	0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1c,
	0x2e, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65,
	0x6d, 0x6f, 0x6a, 0x69, 0x76, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x08, 0x5a, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_Voting_proto_rawDescOnce sync.Once
	file_proto_Voting_proto_rawDescData = file_proto_Voting_proto_rawDesc
)

func file_proto_Voting_proto_rawDescGZIP() []byte {
	file_proto_Voting_proto_rawDescOnce.Do(func() {
		file_proto_Voting_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_Voting_proto_rawDescData)
	})
	return file_proto_Voting_proto_rawDescData
}

var file_proto_Voting_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_Voting_proto_goTypes = []interface{}{
	(*VotingResult)(nil),    // 0: emojivoto.v1.VotingResult
	(*VoteRequest)(nil),     // 1: emojivoto.v1.VoteRequest
	(*VoteResponse)(nil),    // 2: emojivoto.v1.VoteResponse
	(*ResultsRequest)(nil),  // 3: emojivoto.v1.ResultsRequest
	(*ResultsResponse)(nil), // 4: emojivoto.v1.ResultsResponse
}
var file_proto_Voting_proto_depIdxs = []int32{
	0,   // 0: emojivoto.v1.ResultsResponse.results:type_name -> emojivoto.v1.VotingResult
	1,   // 1: emojivoto.v1.VotingService.VotePoop:input_type -> emojivoto.v1.VoteRequest
	1,   // 2: emojivoto.v1.VotingService.VoteJoy:input_type -> emojivoto.v1.VoteRequest
	1,   // 3: emojivoto.v1.VotingService.VoteSunglasses:input_type -> emojivoto.v1.VoteRequest
	1,   // 4: emojivoto.v1.VotingService.VoteRelaxed:input_type -> emojivoto.v1.VoteRequest
	1,   // 5: emojivoto.v1.VotingService.VoteStuckOutTongueWinkingEye:input_type -> emojivoto.v1.VoteRequest
	1,   // 6: emojivoto.v1.VotingService.VoteMoneyMouthFace:input_type -> emojivoto.v1.VoteRequest
	1,   // 7: emojivoto.v1.VotingService.VoteFlushed:input_type -> emojivoto.v1.VoteRequest
	1,   // 8: emojivoto.v1.VotingService.VoteMask:input_type -> emojivoto.v1.VoteRequest
	1,   // 9: emojivoto.v1.VotingService.VoteNerdFace:input_type -> emojivoto.v1.VoteRequest
	1,   // 10: emojivoto.v1.VotingService.VoteGhost:input_type -> emojivoto.v1.VoteRequest
	1,   // 11: emojivoto.v1.VotingService.VoteSkullAndCrossbones:input_type -> emojivoto.v1.VoteRequest
	1,   // 12: emojivoto.v1.VotingService.VoteHeartEyesCat:input_type -> emojivoto.v1.VoteRequest
	1,   // 13: emojivoto.v1.VotingService.VoteHearNoEvil:input_type -> emojivoto.v1.VoteRequest
	1,   // 14: emojivoto.v1.VotingService.VoteSeeNoEvil:input_type -> emojivoto.v1.VoteRequest
	1,   // 15: emojivoto.v1.VotingService.VoteSpeakNoEvil:input_type -> emojivoto.v1.VoteRequest
	1,   // 16: emojivoto.v1.VotingService.VoteBoy:input_type -> emojivoto.v1.VoteRequest
	1,   // 17: emojivoto.v1.VotingService.VoteGirl:input_type -> emojivoto.v1.VoteRequest
	1,   // 18: emojivoto.v1.VotingService.VoteMan:input_type -> emojivoto.v1.VoteRequest
	1,   // 19: emojivoto.v1.VotingService.VoteWoman:input_type -> emojivoto.v1.VoteRequest
	1,   // 20: emojivoto.v1.VotingService.VoteOlderMan:input_type -> emojivoto.v1.VoteRequest
	1,   // 21: emojivoto.v1.VotingService.VotePoliceman:input_type -> emojivoto.v1.VoteRequest
	1,   // 22: emojivoto.v1.VotingService.VoteGuardsman:input_type -> emojivoto.v1.VoteRequest
	1,   // 23: emojivoto.v1.VotingService.VoteConstructionWorkerMan:input_type -> emojivoto.v1.VoteRequest
	1,   // 24: emojivoto.v1.VotingService.VotePrince:input_type -> emojivoto.v1.VoteRequest
	1,   // 25: emojivoto.v1.VotingService.VotePrincess:input_type -> emojivoto.v1.VoteRequest
	1,   // 26: emojivoto.v1.VotingService.VoteManInTuxedo:input_type -> emojivoto.v1.VoteRequest
	1,   // 27: emojivoto.v1.VotingService.VoteBrideWithVeil:input_type -> emojivoto.v1.VoteRequest
	1,   // 28: emojivoto.v1.VotingService.VoteMrsClaus:input_type -> emojivoto.v1.VoteRequest
	1,   // 29: emojivoto.v1.VotingService.VoteSanta:input_type -> emojivoto.v1.VoteRequest
	1,   // 30: emojivoto.v1.VotingService.VoteTurkey:input_type -> emojivoto.v1.VoteRequest
	1,   // 31: emojivoto.v1.VotingService.VoteRabbit:input_type -> emojivoto.v1.VoteRequest
	1,   // 32: emojivoto.v1.VotingService.VoteNoGoodWoman:input_type -> emojivoto.v1.VoteRequest
	1,   // 33: emojivoto.v1.VotingService.VoteOkWoman:input_type -> emojivoto.v1.VoteRequest
	1,   // 34: emojivoto.v1.VotingService.VoteRaisingHandWoman:input_type -> emojivoto.v1.VoteRequest
	1,   // 35: emojivoto.v1.VotingService.VoteBowingMan:input_type -> emojivoto.v1.VoteRequest
	1,   // 36: emojivoto.v1.VotingService.VoteManFacepalming:input_type -> emojivoto.v1.VoteRequest
	1,   // 37: emojivoto.v1.VotingService.VoteWomanShrugging:input_type -> emojivoto.v1.VoteRequest
	1,   // 38: emojivoto.v1.VotingService.VoteMassageWoman:input_type -> emojivoto.v1.VoteRequest
	1,   // 39: emojivoto.v1.VotingService.VoteWalkingMan:input_type -> emojivoto.v1.VoteRequest
	1,   // 40: emojivoto.v1.VotingService.VoteRunningMan:input_type -> emojivoto.v1.VoteRequest
	1,   // 41: emojivoto.v1.VotingService.VoteDancer:input_type -> emojivoto.v1.VoteRequest
	1,   // 42: emojivoto.v1.VotingService.VoteManDancing:input_type -> emojivoto.v1.VoteRequest
	1,   // 43: emojivoto.v1.VotingService.VoteDancingWomen:input_type -> emojivoto.v1.VoteRequest
	1,   // 44: emojivoto.v1.VotingService.VoteRainbow:input_type -> emojivoto.v1.VoteRequest
	1,   // 45: emojivoto.v1.VotingService.VoteSkier:input_type -> emojivoto.v1.VoteRequest
	1,   // 46: emojivoto.v1.VotingService.VoteGolfingMan:input_type -> emojivoto.v1.VoteRequest
	1,   // 47: emojivoto.v1.VotingService.VoteSurfingMan:input_type -> emojivoto.v1.VoteRequest
	1,   // 48: emojivoto.v1.VotingService.VoteBasketballMan:input_type -> emojivoto.v1.VoteRequest
	1,   // 49: emojivoto.v1.VotingService.VoteBikingMan:input_type -> emojivoto.v1.VoteRequest
	1,   // 50: emojivoto.v1.VotingService.VotePointUp2:input_type -> emojivoto.v1.VoteRequest
	1,   // 51: emojivoto.v1.VotingService.VoteVulcanSalute:input_type -> emojivoto.v1.VoteRequest
	1,   // 52: emojivoto.v1.VotingService.VoteMetal:input_type -> emojivoto.v1.VoteRequest
	1,   // 53: emojivoto.v1.VotingService.VoteCallMeHand:input_type -> emojivoto.v1.VoteRequest
	1,   // 54: emojivoto.v1.VotingService.VoteThumbsup:input_type -> emojivoto.v1.VoteRequest
	1,   // 55: emojivoto.v1.VotingService.VoteWave:input_type -> emojivoto.v1.VoteRequest
	1,   // 56: emojivoto.v1.VotingService.VoteClap:input_type -> emojivoto.v1.VoteRequest
	1,   // 57: emojivoto.v1.VotingService.VoteRaisedHands:input_type -> emojivoto.v1.VoteRequest
	1,   // 58: emojivoto.v1.VotingService.VotePray:input_type -> emojivoto.v1.VoteRequest
	1,   // 59: emojivoto.v1.VotingService.VoteDog:input_type -> emojivoto.v1.VoteRequest
	1,   // 60: emojivoto.v1.VotingService.VoteCat2:input_type -> emojivoto.v1.VoteRequest
	1,   // 61: emojivoto.v1.VotingService.VotePig:input_type -> emojivoto.v1.VoteRequest
	1,   // 62: emojivoto.v1.VotingService.VoteHatchingChick:input_type -> emojivoto.v1.VoteRequest
	1,   // 63: emojivoto.v1.VotingService.VoteSnail:input_type -> emojivoto.v1.VoteRequest
	1,   // 64: emojivoto.v1.VotingService.VoteBacon:input_type -> emojivoto.v1.VoteRequest
	1,   // 65: emojivoto.v1.VotingService.VotePizza:input_type -> emojivoto.v1.VoteRequest
	1,   // 66: emojivoto.v1.VotingService.VoteTaco:input_type -> emojivoto.v1.VoteRequest
	1,   // 67: emojivoto.v1.VotingService.VoteBurrito:input_type -> emojivoto.v1.VoteRequest
	1,   // 68: emojivoto.v1.VotingService.VoteRamen:input_type -> emojivoto.v1.VoteRequest
	1,   // 69: emojivoto.v1.VotingService.VoteDoughnut:input_type -> emojivoto.v1.VoteRequest
	1,   // 70: emojivoto.v1.VotingService.VoteChampagne:input_type -> emojivoto.v1.VoteRequest
	1,   // 71: emojivoto.v1.VotingService.VoteTropicalDrink:input_type -> emojivoto.v1.VoteRequest
	1,   // 72: emojivoto.v1.VotingService.VoteBeer:input_type -> emojivoto.v1.VoteRequest
	1,   // 73: emojivoto.v1.VotingService.VoteTumblerGlass:input_type -> emojivoto.v1.VoteRequest
	1,   // 74: emojivoto.v1.VotingService.VoteWorldMap:input_type -> emojivoto.v1.VoteRequest
	1,   // 75: emojivoto.v1.VotingService.VoteBeachUmbrella:input_type -> emojivoto.v1.VoteRequest
	1,   // 76: emojivoto.v1.VotingService.VoteMountainSnow:input_type -> emojivoto.v1.VoteRequest
	1,   // 77: emojivoto.v1.VotingService.VoteCamping:input_type -> emojivoto.v1.VoteRequest
	1,   // 78: emojivoto.v1.VotingService.VoteSteamLocomotive:input_type -> emojivoto.v1.VoteRequest
	1,   // 79: emojivoto.v1.VotingService.VoteFlightDeparture:input_type -> emojivoto.v1.VoteRequest
	1,   // 80: emojivoto.v1.VotingService.VoteRocket:input_type -> emojivoto.v1.VoteRequest
	1,   // 81: emojivoto.v1.VotingService.VoteStar2:input_type -> emojivoto.v1.VoteRequest
	1,   // 82: emojivoto.v1.VotingService.VoteSunBehindSmallCloud:input_type -> emojivoto.v1.VoteRequest
	1,   // 83: emojivoto.v1.VotingService.VoteCloudWithRain:input_type -> emojivoto.v1.VoteRequest
	1,   // 84: emojivoto.v1.VotingService.VoteFire:input_type -> emojivoto.v1.VoteRequest
	1,   // 85: emojivoto.v1.VotingService.VoteJackOLantern:input_type -> emojivoto.v1.VoteRequest
	1,   // 86: emojivoto.v1.VotingService.VoteBalloon:input_type -> emojivoto.v1.VoteRequest
	1,   // 87: emojivoto.v1.VotingService.VoteTada:input_type -> emojivoto.v1.VoteRequest
	1,   // 88: emojivoto.v1.VotingService.VoteTrophy:input_type -> emojivoto.v1.VoteRequest
	1,   // 89: emojivoto.v1.VotingService.VoteIphone:input_type -> emojivoto.v1.VoteRequest
	1,   // 90: emojivoto.v1.VotingService.VotePager:input_type -> emojivoto.v1.VoteRequest
	1,   // 91: emojivoto.v1.VotingService.VoteFax:input_type -> emojivoto.v1.VoteRequest
	1,   // 92: emojivoto.v1.VotingService.VoteBulb:input_type -> emojivoto.v1.VoteRequest
	1,   // 93: emojivoto.v1.VotingService.VoteMoneyWithWings:input_type -> emojivoto.v1.VoteRequest
	1,   // 94: emojivoto.v1.VotingService.VoteCrystalBall:input_type -> emojivoto.v1.VoteRequest
	1,   // 95: emojivoto.v1.VotingService.VoteUnderage:input_type -> emojivoto.v1.VoteRequest
	1,   // 96: emojivoto.v1.VotingService.VoteInterrobang:input_type -> emojivoto.v1.VoteRequest
	1,   // 97: emojivoto.v1.VotingService.Vote100:input_type -> emojivoto.v1.VoteRequest
	1,   // 98: emojivoto.v1.VotingService.VoteCheckeredFlag:input_type -> emojivoto.v1.VoteRequest
	1,   // 99: emojivoto.v1.VotingService.VoteCrossedSwords:input_type -> emojivoto.v1.VoteRequest
	1,   // 100: emojivoto.v1.VotingService.VoteFloppyDisk:input_type -> emojivoto.v1.VoteRequest
	3,   // 101: emojivoto.v1.VotingService.Results:input_type -> emojivoto.v1.ResultsRequest
	2,   // 102: emojivoto.v1.VotingService.VotePoop:output_type -> emojivoto.v1.VoteResponse
	2,   // 103: emojivoto.v1.VotingService.VoteJoy:output_type -> emojivoto.v1.VoteResponse
	2,   // 104: emojivoto.v1.VotingService.VoteSunglasses:output_type -> emojivoto.v1.VoteResponse
	2,   // 105: emojivoto.v1.VotingService.VoteRelaxed:output_type -> emojivoto.v1.VoteResponse
	2,   // 106: emojivoto.v1.VotingService.VoteStuckOutTongueWinkingEye:output_type -> emojivoto.v1.VoteResponse
	2,   // 107: emojivoto.v1.VotingService.VoteMoneyMouthFace:output_type -> emojivoto.v1.VoteResponse
	2,   // 108: emojivoto.v1.VotingService.VoteFlushed:output_type -> emojivoto.v1.VoteResponse
	2,   // 109: emojivoto.v1.VotingService.VoteMask:output_type -> emojivoto.v1.VoteResponse
	2,   // 110: emojivoto.v1.VotingService.VoteNerdFace:output_type -> emojivoto.v1.VoteResponse
	2,   // 111: emojivoto.v1.VotingService.VoteGhost:output_type -> emojivoto.v1.VoteResponse
	2,   // 112: emojivoto.v1.VotingService.VoteSkullAndCrossbones:output_type -> emojivoto.v1.VoteResponse
	2,   // 113: emojivoto.v1.VotingService.VoteHeartEyesCat:output_type -> emojivoto.v1.VoteResponse
	2,   // 114: emojivoto.v1.VotingService.VoteHearNoEvil:output_type -> emojivoto.v1.VoteResponse
	2,   // 115: emojivoto.v1.VotingService.VoteSeeNoEvil:output_type -> emojivoto.v1.VoteResponse
	2,   // 116: emojivoto.v1.VotingService.VoteSpeakNoEvil:output_type -> emojivoto.v1.VoteResponse
	2,   // 117: emojivoto.v1.VotingService.VoteBoy:output_type -> emojivoto.v1.VoteResponse
	2,   // 118: emojivoto.v1.VotingService.VoteGirl:output_type -> emojivoto.v1.VoteResponse
	2,   // 119: emojivoto.v1.VotingService.VoteMan:output_type -> emojivoto.v1.VoteResponse
	2,   // 120: emojivoto.v1.VotingService.VoteWoman:output_type -> emojivoto.v1.VoteResponse
	2,   // 121: emojivoto.v1.VotingService.VoteOlderMan:output_type -> emojivoto.v1.VoteResponse
	2,   // 122: emojivoto.v1.VotingService.VotePoliceman:output_type -> emojivoto.v1.VoteResponse
	2,   // 123: emojivoto.v1.VotingService.VoteGuardsman:output_type -> emojivoto.v1.VoteResponse
	2,   // 124: emojivoto.v1.VotingService.VoteConstructionWorkerMan:output_type -> emojivoto.v1.VoteResponse
	2,   // 125: emojivoto.v1.VotingService.VotePrince:output_type -> emojivoto.v1.VoteResponse
	2,   // 126: emojivoto.v1.VotingService.VotePrincess:output_type -> emojivoto.v1.VoteResponse
	2,   // 127: emojivoto.v1.VotingService.VoteManInTuxedo:output_type -> emojivoto.v1.VoteResponse
	2,   // 128: emojivoto.v1.VotingService.VoteBrideWithVeil:output_type -> emojivoto.v1.VoteResponse
	2,   // 129: emojivoto.v1.VotingService.VoteMrsClaus:output_type -> emojivoto.v1.VoteResponse
	2,   // 130: emojivoto.v1.VotingService.VoteSanta:output_type -> emojivoto.v1.VoteResponse
	2,   // 131: emojivoto.v1.VotingService.VoteTurkey:output_type -> emojivoto.v1.VoteResponse
	2,   // 132: emojivoto.v1.VotingService.VoteRabbit:output_type -> emojivoto.v1.VoteResponse
	2,   // 133: emojivoto.v1.VotingService.VoteNoGoodWoman:output_type -> emojivoto.v1.VoteResponse
	2,   // 134: emojivoto.v1.VotingService.VoteOkWoman:output_type -> emojivoto.v1.VoteResponse
	2,   // 135: emojivoto.v1.VotingService.VoteRaisingHandWoman:output_type -> emojivoto.v1.VoteResponse
	2,   // 136: emojivoto.v1.VotingService.VoteBowingMan:output_type -> emojivoto.v1.VoteResponse
	2,   // 137: emojivoto.v1.VotingService.VoteManFacepalming:output_type -> emojivoto.v1.VoteResponse
	2,   // 138: emojivoto.v1.VotingService.VoteWomanShrugging:output_type -> emojivoto.v1.VoteResponse
	2,   // 139: emojivoto.v1.VotingService.VoteMassageWoman:output_type -> emojivoto.v1.VoteResponse
	2,   // 140: emojivoto.v1.VotingService.VoteWalkingMan:output_type -> emojivoto.v1.VoteResponse
	2,   // 141: emojivoto.v1.VotingService.VoteRunningMan:output_type -> emojivoto.v1.VoteResponse
	2,   // 142: emojivoto.v1.VotingService.VoteDancer:output_type -> emojivoto.v1.VoteResponse
	2,   // 143: emojivoto.v1.VotingService.VoteManDancing:output_type -> emojivoto.v1.VoteResponse
	2,   // 144: emojivoto.v1.VotingService.VoteDancingWomen:output_type -> emojivoto.v1.VoteResponse
	2,   // 145: emojivoto.v1.VotingService.VoteRainbow:output_type -> emojivoto.v1.VoteResponse
	2,   // 146: emojivoto.v1.VotingService.VoteSkier:output_type -> emojivoto.v1.VoteResponse
	2,   // 147: emojivoto.v1.VotingService.VoteGolfingMan:output_type -> emojivoto.v1.VoteResponse
	2,   // 148: emojivoto.v1.VotingService.VoteSurfingMan:output_type -> emojivoto.v1.VoteResponse
	2,   // 149: emojivoto.v1.VotingService.VoteBasketballMan:output_type -> emojivoto.v1.VoteResponse
	2,   // 150: emojivoto.v1.VotingService.VoteBikingMan:output_type -> emojivoto.v1.VoteResponse
	2,   // 151: emojivoto.v1.VotingService.VotePointUp2:output_type -> emojivoto.v1.VoteResponse
	2,   // 152: emojivoto.v1.VotingService.VoteVulcanSalute:output_type -> emojivoto.v1.VoteResponse
	2,   // 153: emojivoto.v1.VotingService.VoteMetal:output_type -> emojivoto.v1.VoteResponse
	2,   // 154: emojivoto.v1.VotingService.VoteCallMeHand:output_type -> emojivoto.v1.VoteResponse
	2,   // 155: emojivoto.v1.VotingService.VoteThumbsup:output_type -> emojivoto.v1.VoteResponse
	2,   // 156: emojivoto.v1.VotingService.VoteWave:output_type -> emojivoto.v1.VoteResponse
	2,   // 157: emojivoto.v1.VotingService.VoteClap:output_type -> emojivoto.v1.VoteResponse
	2,   // 158: emojivoto.v1.VotingService.VoteRaisedHands:output_type -> emojivoto.v1.VoteResponse
	2,   // 159: emojivoto.v1.VotingService.VotePray:output_type -> emojivoto.v1.VoteResponse
	2,   // 160: emojivoto.v1.VotingService.VoteDog:output_type -> emojivoto.v1.VoteResponse
	2,   // 161: emojivoto.v1.VotingService.VoteCat2:output_type -> emojivoto.v1.VoteResponse
	2,   // 162: emojivoto.v1.VotingService.VotePig:output_type -> emojivoto.v1.VoteResponse
	2,   // 163: emojivoto.v1.VotingService.VoteHatchingChick:output_type -> emojivoto.v1.VoteResponse
	2,   // 164: emojivoto.v1.VotingService.VoteSnail:output_type -> emojivoto.v1.VoteResponse
	2,   // 165: emojivoto.v1.VotingService.VoteBacon:output_type -> emojivoto.v1.VoteResponse
	2,   // 166: emojivoto.v1.VotingService.VotePizza:output_type -> emojivoto.v1.VoteResponse
	2,   // 167: emojivoto.v1.VotingService.VoteTaco:output_type -> emojivoto.v1.VoteResponse
	2,   // 168: emojivoto.v1.VotingService.VoteBurrito:output_type -> emojivoto.v1.VoteResponse
	2,   // 169: emojivoto.v1.VotingService.VoteRamen:output_type -> emojivoto.v1.VoteResponse
	2,   // 170: emojivoto.v1.VotingService.VoteDoughnut:output_type -> emojivoto.v1.VoteResponse
	2,   // 171: emojivoto.v1.VotingService.VoteChampagne:output_type -> emojivoto.v1.VoteResponse
	2,   // 172: emojivoto.v1.VotingService.VoteTropicalDrink:output_type -> emojivoto.v1.VoteResponse
	2,   // 173: emojivoto.v1.VotingService.VoteBeer:output_type -> emojivoto.v1.VoteResponse
	2,   // 174: emojivoto.v1.VotingService.VoteTumblerGlass:output_type -> emojivoto.v1.VoteResponse
	2,   // 175: emojivoto.v1.VotingService.VoteWorldMap:output_type -> emojivoto.v1.VoteResponse
	2,   // 176: emojivoto.v1.VotingService.VoteBeachUmbrella:output_type -> emojivoto.v1.VoteResponse
	2,   // 177: emojivoto.v1.VotingService.VoteMountainSnow:output_type -> emojivoto.v1.VoteResponse
	2,   // 178: emojivoto.v1.VotingService.VoteCamping:output_type -> emojivoto.v1.VoteResponse
	2,   // 179: emojivoto.v1.VotingService.VoteSteamLocomotive:output_type -> emojivoto.v1.VoteResponse
	2,   // 180: emojivoto.v1.VotingService.VoteFlightDeparture:output_type -> emojivoto.v1.VoteResponse
	2,   // 181: emojivoto.v1.VotingService.VoteRocket:output_type -> emojivoto.v1.VoteResponse
	2,   // 182: emojivoto.v1.VotingService.VoteStar2:output_type -> emojivoto.v1.VoteResponse
	2,   // 183: emojivoto.v1.VotingService.VoteSunBehindSmallCloud:output_type -> emojivoto.v1.VoteResponse
	2,   // 184: emojivoto.v1.VotingService.VoteCloudWithRain:output_type -> emojivoto.v1.VoteResponse
	2,   // 185: emojivoto.v1.VotingService.VoteFire:output_type -> emojivoto.v1.VoteResponse
	2,   // 186: emojivoto.v1.VotingService.VoteJackOLantern:output_type -> emojivoto.v1.VoteResponse
	2,   // 187: emojivoto.v1.VotingService.VoteBalloon:output_type -> emojivoto.v1.VoteResponse
	2,   // 188: emojivoto.v1.VotingService.VoteTada:output_type -> emojivoto.v1.VoteResponse
	2,   // 189: emojivoto.v1.VotingService.VoteTrophy:output_type -> emojivoto.v1.VoteResponse
	2,   // 190: emojivoto.v1.VotingService.VoteIphone:output_type -> emojivoto.v1.VoteResponse
	2,   // 191: emojivoto.v1.VotingService.VotePager:output_type -> emojivoto.v1.VoteResponse
	2,   // 192: emojivoto.v1.VotingService.VoteFax:output_type -> emojivoto.v1.VoteResponse
	2,   // 193: emojivoto.v1.VotingService.VoteBulb:output_type -> emojivoto.v1.VoteResponse
	2,   // 194: emojivoto.v1.VotingService.VoteMoneyWithWings:output_type -> emojivoto.v1.VoteResponse
	2,   // 195: emojivoto.v1.VotingService.VoteCrystalBall:output_type -> emojivoto.v1.VoteResponse
	2,   // 196: emojivoto.v1.VotingService.VoteUnderage:output_type -> emojivoto.v1.VoteResponse
	2,   // 197: emojivoto.v1.VotingService.VoteInterrobang:output_type -> emojivoto.v1.VoteResponse
	2,   // 198: emojivoto.v1.VotingService.Vote100:output_type -> emojivoto.v1.VoteResponse
	2,   // 199: emojivoto.v1.VotingService.VoteCheckeredFlag:output_type -> emojivoto.v1.VoteResponse
	2,   // 200: emojivoto.v1.VotingService.VoteCrossedSwords:output_type -> emojivoto.v1.VoteResponse
	2,   // 201: emojivoto.v1.VotingService.VoteFloppyDisk:output_type -> emojivoto.v1.VoteResponse
	4,   // 202: emojivoto.v1.VotingService.Results:output_type -> emojivoto.v1.ResultsResponse
	102, // [102:203] is the sub-list for method output_type
	1,   // [1:102] is the sub-list for method input_type
	1,   // [1:1] is the sub-list for extension type_name
	1,   // [1:1] is the sub-list for extension extendee
	0,   // [0:1] is the sub-list for field type_name
}

func init() { file_proto_Voting_proto_init() }
func file_proto_Voting_proto_init() {
	if File_proto_Voting_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_Voting_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VotingResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_Voting_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_Voting_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_Voting_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_Voting_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_Voting_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_Voting_proto_goTypes,
		DependencyIndexes: file_proto_Voting_proto_depIdxs,
		MessageInfos:      file_proto_Voting_proto_msgTypes,
	}.Build()
	File_proto_Voting_proto = out.File
	file_proto_Voting_proto_rawDesc = nil
	file_proto_Voting_proto_goTypes = nil
	file_proto_Voting_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VotingServiceClient is the client API for VotingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VotingServiceClient interface {
	VotePoop(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteJoy(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSunglasses(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRelaxed(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteStuckOutTongueWinkingEye(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMoneyMouthFace(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteFlushed(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMask(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteNerdFace(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteGhost(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSkullAndCrossbones(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteHeartEyesCat(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteHearNoEvil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSeeNoEvil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSpeakNoEvil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBoy(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteGirl(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteOlderMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePoliceman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteGuardsman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteConstructionWorkerMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePrince(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePrincess(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteManInTuxedo(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBrideWithVeil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMrsClaus(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSanta(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteTurkey(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRabbit(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteNoGoodWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteOkWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRaisingHandWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBowingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteManFacepalming(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteWomanShrugging(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMassageWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteWalkingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRunningMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteDancer(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteManDancing(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteDancingWomen(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRainbow(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSkier(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteGolfingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSurfingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBasketballMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBikingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePointUp2(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteVulcanSalute(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMetal(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteCallMeHand(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteThumbsup(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteWave(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteClap(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRaisedHands(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePray(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteDog(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteCat2(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePig(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteHatchingChick(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSnail(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBacon(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePizza(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteTaco(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBurrito(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRamen(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteDoughnut(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteChampagne(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteTropicalDrink(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBeer(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteTumblerGlass(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteWorldMap(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBeachUmbrella(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMountainSnow(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteCamping(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSteamLocomotive(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteFlightDeparture(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRocket(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteStar2(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSunBehindSmallCloud(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteCloudWithRain(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteFire(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteJackOLantern(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBalloon(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteTada(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteTrophy(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteIphone(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePager(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteFax(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBulb(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMoneyWithWings(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteCrystalBall(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteUnderage(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteInterrobang(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	Vote100(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteCheckeredFlag(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteCrossedSwords(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteFloppyDisk(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	Results(ctx context.Context, in *ResultsRequest, opts ...grpc.CallOption) (*ResultsResponse, error)
}

type votingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVotingServiceClient(cc grpc.ClientConnInterface) VotingServiceClient {
	return &votingServiceClient{cc}
}

func (c *votingServiceClient) VotePoop(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePoop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteJoy(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteJoy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSunglasses(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSunglasses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRelaxed(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRelaxed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteStuckOutTongueWinkingEye(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteStuckOutTongueWinkingEye", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMoneyMouthFace(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMoneyMouthFace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteFlushed(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteFlushed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMask(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteNerdFace(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteNerdFace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteGhost(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteGhost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSkullAndCrossbones(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSkullAndCrossbones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteHeartEyesCat(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteHeartEyesCat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteHearNoEvil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteHearNoEvil", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSeeNoEvil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSeeNoEvil", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSpeakNoEvil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSpeakNoEvil", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBoy(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBoy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteGirl(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteGirl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteWoman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteOlderMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteOlderMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePoliceman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePoliceman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteGuardsman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteGuardsman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteConstructionWorkerMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteConstructionWorkerMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePrince(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePrince", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePrincess(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePrincess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteManInTuxedo(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteManInTuxedo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBrideWithVeil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBrideWithVeil", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMrsClaus(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMrsClaus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSanta(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSanta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteTurkey(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteTurkey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRabbit(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRabbit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteNoGoodWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteNoGoodWoman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteOkWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteOkWoman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRaisingHandWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRaisingHandWoman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBowingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBowingMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteManFacepalming(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteManFacepalming", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteWomanShrugging(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteWomanShrugging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMassageWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMassageWoman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteWalkingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteWalkingMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRunningMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRunningMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteDancer(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteDancer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteManDancing(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteManDancing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteDancingWomen(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteDancingWomen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRainbow(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRainbow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSkier(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSkier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteGolfingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteGolfingMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSurfingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSurfingMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBasketballMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBasketballMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBikingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBikingMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePointUp2(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePointUp2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteVulcanSalute(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteVulcanSalute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMetal(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMetal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteCallMeHand(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteCallMeHand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteThumbsup(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteThumbsup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteWave(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteWave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteClap(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteClap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRaisedHands(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRaisedHands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePray(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePray", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteDog(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteDog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteCat2(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteCat2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePig(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteHatchingChick(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteHatchingChick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSnail(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSnail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBacon(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBacon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePizza(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePizza", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteTaco(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteTaco", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBurrito(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBurrito", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRamen(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRamen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteDoughnut(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteDoughnut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteChampagne(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteChampagne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteTropicalDrink(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteTropicalDrink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBeer(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteTumblerGlass(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteTumblerGlass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteWorldMap(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteWorldMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBeachUmbrella(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBeachUmbrella", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMountainSnow(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMountainSnow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteCamping(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteCamping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSteamLocomotive(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSteamLocomotive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteFlightDeparture(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteFlightDeparture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRocket(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRocket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteStar2(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteStar2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSunBehindSmallCloud(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSunBehindSmallCloud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteCloudWithRain(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteCloudWithRain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteFire(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteFire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteJackOLantern(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteJackOLantern", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBalloon(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBalloon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteTada(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteTada", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteTrophy(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteTrophy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteIphone(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteIphone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePager(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteFax(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteFax", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBulb(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBulb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMoneyWithWings(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMoneyWithWings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteCrystalBall(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteCrystalBall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteUnderage(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteUnderage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteInterrobang(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteInterrobang", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) Vote100(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/Vote100", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteCheckeredFlag(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteCheckeredFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteCrossedSwords(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteCrossedSwords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteFloppyDisk(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteFloppyDisk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) Results(ctx context.Context, in *ResultsRequest, opts ...grpc.CallOption) (*ResultsResponse, error) {
	out := new(ResultsResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/Results", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VotingServiceServer is the server API for VotingService service.
type VotingServiceServer interface {
	VotePoop(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteJoy(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSunglasses(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRelaxed(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteStuckOutTongueWinkingEye(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMoneyMouthFace(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteFlushed(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMask(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteNerdFace(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteGhost(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSkullAndCrossbones(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteHeartEyesCat(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteHearNoEvil(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSeeNoEvil(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSpeakNoEvil(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBoy(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteGirl(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteWoman(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteOlderMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePoliceman(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteGuardsman(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteConstructionWorkerMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePrince(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePrincess(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteManInTuxedo(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBrideWithVeil(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMrsClaus(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSanta(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteTurkey(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRabbit(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteNoGoodWoman(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteOkWoman(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRaisingHandWoman(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBowingMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteManFacepalming(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteWomanShrugging(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMassageWoman(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteWalkingMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRunningMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteDancer(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteManDancing(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteDancingWomen(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRainbow(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSkier(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteGolfingMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSurfingMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBasketballMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBikingMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePointUp2(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteVulcanSalute(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMetal(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteCallMeHand(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteThumbsup(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteWave(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteClap(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRaisedHands(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePray(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteDog(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteCat2(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePig(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteHatchingChick(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSnail(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBacon(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePizza(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteTaco(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBurrito(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRamen(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteDoughnut(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteChampagne(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteTropicalDrink(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBeer(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteTumblerGlass(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteWorldMap(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBeachUmbrella(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMountainSnow(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteCamping(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSteamLocomotive(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteFlightDeparture(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRocket(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteStar2(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSunBehindSmallCloud(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteCloudWithRain(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteFire(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteJackOLantern(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBalloon(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteTada(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteTrophy(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteIphone(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePager(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteFax(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBulb(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMoneyWithWings(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteCrystalBall(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteUnderage(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteInterrobang(context.Context, *VoteRequest) (*VoteResponse, error)
	Vote100(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteCheckeredFlag(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteCrossedSwords(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteFloppyDisk(context.Context, *VoteRequest) (*VoteResponse, error)
	Results(context.Context, *ResultsRequest) (*ResultsResponse, error)
}

// UnimplementedVotingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVotingServiceServer struct {
}

func (*UnimplementedVotingServiceServer) VotePoop(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePoop not implemented")
}
func (*UnimplementedVotingServiceServer) VoteJoy(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteJoy not implemented")
}
func (*UnimplementedVotingServiceServer) VoteSunglasses(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSunglasses not implemented")
}
func (*UnimplementedVotingServiceServer) VoteRelaxed(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteRelaxed not implemented")
}
func (*UnimplementedVotingServiceServer) VoteStuckOutTongueWinkingEye(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteStuckOutTongueWinkingEye not implemented")
}
func (*UnimplementedVotingServiceServer) VoteMoneyMouthFace(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteMoneyMouthFace not implemented")
}
func (*UnimplementedVotingServiceServer) VoteFlushed(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteFlushed not implemented")
}
func (*UnimplementedVotingServiceServer) VoteMask(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteMask not implemented")
}
func (*UnimplementedVotingServiceServer) VoteNerdFace(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteNerdFace not implemented")
}
func (*UnimplementedVotingServiceServer) VoteGhost(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteGhost not implemented")
}
func (*UnimplementedVotingServiceServer) VoteSkullAndCrossbones(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSkullAndCrossbones not implemented")
}
func (*UnimplementedVotingServiceServer) VoteHeartEyesCat(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteHeartEyesCat not implemented")
}
func (*UnimplementedVotingServiceServer) VoteHearNoEvil(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteHearNoEvil not implemented")
}
func (*UnimplementedVotingServiceServer) VoteSeeNoEvil(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSeeNoEvil not implemented")
}
func (*UnimplementedVotingServiceServer) VoteSpeakNoEvil(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSpeakNoEvil not implemented")
}
func (*UnimplementedVotingServiceServer) VoteBoy(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBoy not implemented")
}
func (*UnimplementedVotingServiceServer) VoteGirl(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteGirl not implemented")
}
func (*UnimplementedVotingServiceServer) VoteMan(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteMan not implemented")
}
func (*UnimplementedVotingServiceServer) VoteWoman(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteWoman not implemented")
}
func (*UnimplementedVotingServiceServer) VoteOlderMan(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteOlderMan not implemented")
}
func (*UnimplementedVotingServiceServer) VotePoliceman(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePoliceman not implemented")
}
func (*UnimplementedVotingServiceServer) VoteGuardsman(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteGuardsman not implemented")
}
func (*UnimplementedVotingServiceServer) VoteConstructionWorkerMan(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteConstructionWorkerMan not implemented")
}
func (*UnimplementedVotingServiceServer) VotePrince(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePrince not implemented")
}
func (*UnimplementedVotingServiceServer) VotePrincess(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePrincess not implemented")
}
func (*UnimplementedVotingServiceServer) VoteManInTuxedo(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteManInTuxedo not implemented")
}
func (*UnimplementedVotingServiceServer) VoteBrideWithVeil(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBrideWithVeil not implemented")
}
func (*UnimplementedVotingServiceServer) VoteMrsClaus(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteMrsClaus not implemented")
}
func (*UnimplementedVotingServiceServer) VoteSanta(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSanta not implemented")
}
func (*UnimplementedVotingServiceServer) VoteTurkey(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteTurkey not implemented")
}
func (*UnimplementedVotingServiceServer) VoteRabbit(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteRabbit not implemented")
}
func (*UnimplementedVotingServiceServer) VoteNoGoodWoman(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteNoGoodWoman not implemented")
}
func (*UnimplementedVotingServiceServer) VoteOkWoman(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteOkWoman not implemented")
}
func (*UnimplementedVotingServiceServer) VoteRaisingHandWoman(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteRaisingHandWoman not implemented")
}
func (*UnimplementedVotingServiceServer) VoteBowingMan(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBowingMan not implemented")
}
func (*UnimplementedVotingServiceServer) VoteManFacepalming(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteManFacepalming not implemented")
}
func (*UnimplementedVotingServiceServer) VoteWomanShrugging(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteWomanShrugging not implemented")
}
func (*UnimplementedVotingServiceServer) VoteMassageWoman(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteMassageWoman not implemented")
}
func (*UnimplementedVotingServiceServer) VoteWalkingMan(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteWalkingMan not implemented")
}
func (*UnimplementedVotingServiceServer) VoteRunningMan(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteRunningMan not implemented")
}
func (*UnimplementedVotingServiceServer) VoteDancer(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteDancer not implemented")
}
func (*UnimplementedVotingServiceServer) VoteManDancing(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteManDancing not implemented")
}
func (*UnimplementedVotingServiceServer) VoteDancingWomen(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteDancingWomen not implemented")
}
func (*UnimplementedVotingServiceServer) VoteRainbow(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteRainbow not implemented")
}
func (*UnimplementedVotingServiceServer) VoteSkier(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSkier not implemented")
}
func (*UnimplementedVotingServiceServer) VoteGolfingMan(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteGolfingMan not implemented")
}
func (*UnimplementedVotingServiceServer) VoteSurfingMan(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSurfingMan not implemented")
}
func (*UnimplementedVotingServiceServer) VoteBasketballMan(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBasketballMan not implemented")
}
func (*UnimplementedVotingServiceServer) VoteBikingMan(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBikingMan not implemented")
}
func (*UnimplementedVotingServiceServer) VotePointUp2(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePointUp2 not implemented")
}
func (*UnimplementedVotingServiceServer) VoteVulcanSalute(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteVulcanSalute not implemented")
}
func (*UnimplementedVotingServiceServer) VoteMetal(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteMetal not implemented")
}
func (*UnimplementedVotingServiceServer) VoteCallMeHand(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteCallMeHand not implemented")
}
func (*UnimplementedVotingServiceServer) VoteThumbsup(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteThumbsup not implemented")
}
func (*UnimplementedVotingServiceServer) VoteWave(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteWave not implemented")
}
func (*UnimplementedVotingServiceServer) VoteClap(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteClap not implemented")
}
func (*UnimplementedVotingServiceServer) VoteRaisedHands(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteRaisedHands not implemented")
}
func (*UnimplementedVotingServiceServer) VotePray(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePray not implemented")
}
func (*UnimplementedVotingServiceServer) VoteDog(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteDog not implemented")
}
func (*UnimplementedVotingServiceServer) VoteCat2(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteCat2 not implemented")
}
func (*UnimplementedVotingServiceServer) VotePig(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePig not implemented")
}
func (*UnimplementedVotingServiceServer) VoteHatchingChick(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteHatchingChick not implemented")
}
func (*UnimplementedVotingServiceServer) VoteSnail(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSnail not implemented")
}
func (*UnimplementedVotingServiceServer) VoteBacon(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBacon not implemented")
}
func (*UnimplementedVotingServiceServer) VotePizza(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePizza not implemented")
}
func (*UnimplementedVotingServiceServer) VoteTaco(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteTaco not implemented")
}
func (*UnimplementedVotingServiceServer) VoteBurrito(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBurrito not implemented")
}
func (*UnimplementedVotingServiceServer) VoteRamen(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteRamen not implemented")
}
func (*UnimplementedVotingServiceServer) VoteDoughnut(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteDoughnut not implemented")
}
func (*UnimplementedVotingServiceServer) VoteChampagne(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteChampagne not implemented")
}
func (*UnimplementedVotingServiceServer) VoteTropicalDrink(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteTropicalDrink not implemented")
}
func (*UnimplementedVotingServiceServer) VoteBeer(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBeer not implemented")
}
func (*UnimplementedVotingServiceServer) VoteTumblerGlass(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteTumblerGlass not implemented")
}
func (*UnimplementedVotingServiceServer) VoteWorldMap(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteWorldMap not implemented")
}
func (*UnimplementedVotingServiceServer) VoteBeachUmbrella(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBeachUmbrella not implemented")
}
func (*UnimplementedVotingServiceServer) VoteMountainSnow(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteMountainSnow not implemented")
}
func (*UnimplementedVotingServiceServer) VoteCamping(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteCamping not implemented")
}
func (*UnimplementedVotingServiceServer) VoteSteamLocomotive(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSteamLocomotive not implemented")
}
func (*UnimplementedVotingServiceServer) VoteFlightDeparture(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteFlightDeparture not implemented")
}
func (*UnimplementedVotingServiceServer) VoteRocket(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteRocket not implemented")
}
func (*UnimplementedVotingServiceServer) VoteStar2(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteStar2 not implemented")
}
func (*UnimplementedVotingServiceServer) VoteSunBehindSmallCloud(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSunBehindSmallCloud not implemented")
}
func (*UnimplementedVotingServiceServer) VoteCloudWithRain(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteCloudWithRain not implemented")
}
func (*UnimplementedVotingServiceServer) VoteFire(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteFire not implemented")
}
func (*UnimplementedVotingServiceServer) VoteJackOLantern(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteJackOLantern not implemented")
}
func (*UnimplementedVotingServiceServer) VoteBalloon(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBalloon not implemented")
}
func (*UnimplementedVotingServiceServer) VoteTada(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteTada not implemented")
}
func (*UnimplementedVotingServiceServer) VoteTrophy(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteTrophy not implemented")
}
func (*UnimplementedVotingServiceServer) VoteIphone(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteIphone not implemented")
}
func (*UnimplementedVotingServiceServer) VotePager(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePager not implemented")
}
func (*UnimplementedVotingServiceServer) VoteFax(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteFax not implemented")
}
func (*UnimplementedVotingServiceServer) VoteBulb(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBulb not implemented")
}
func (*UnimplementedVotingServiceServer) VoteMoneyWithWings(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteMoneyWithWings not implemented")
}
func (*UnimplementedVotingServiceServer) VoteCrystalBall(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteCrystalBall not implemented")
}
func (*UnimplementedVotingServiceServer) VoteUnderage(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteUnderage not implemented")
}
func (*UnimplementedVotingServiceServer) VoteInterrobang(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteInterrobang not implemented")
}
func (*UnimplementedVotingServiceServer) Vote100(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote100 not implemented")
}
func (*UnimplementedVotingServiceServer) VoteCheckeredFlag(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteCheckeredFlag not implemented")
}
func (*UnimplementedVotingServiceServer) VoteCrossedSwords(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteCrossedSwords not implemented")
}
func (*UnimplementedVotingServiceServer) VoteFloppyDisk(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteFloppyDisk not implemented")
}
func (*UnimplementedVotingServiceServer) Results(context.Context, *ResultsRequest) (*ResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Results not implemented")
}

func RegisterVotingServiceServer(s *grpc.Server, srv VotingServiceServer) {
	s.RegisterService(&_VotingService_serviceDesc, srv)
}

func _VotingService_VotePoop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePoop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePoop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePoop(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteJoy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteJoy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteJoy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteJoy(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSunglasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSunglasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSunglasses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSunglasses(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRelaxed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRelaxed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRelaxed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRelaxed(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteStuckOutTongueWinkingEye_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteStuckOutTongueWinkingEye(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteStuckOutTongueWinkingEye",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteStuckOutTongueWinkingEye(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMoneyMouthFace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMoneyMouthFace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMoneyMouthFace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMoneyMouthFace(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteFlushed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteFlushed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteFlushed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteFlushed(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMask(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteNerdFace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteNerdFace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteNerdFace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteNerdFace(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteGhost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteGhost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteGhost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteGhost(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSkullAndCrossbones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSkullAndCrossbones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSkullAndCrossbones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSkullAndCrossbones(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteHeartEyesCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteHeartEyesCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteHeartEyesCat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteHeartEyesCat(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteHearNoEvil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteHearNoEvil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteHearNoEvil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteHearNoEvil(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSeeNoEvil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSeeNoEvil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSeeNoEvil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSeeNoEvil(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSpeakNoEvil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSpeakNoEvil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSpeakNoEvil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSpeakNoEvil(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBoy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBoy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBoy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBoy(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteGirl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteGirl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteGirl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteGirl(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteWoman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteWoman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteWoman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteWoman(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteOlderMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteOlderMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteOlderMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteOlderMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePoliceman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePoliceman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePoliceman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePoliceman(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteGuardsman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteGuardsman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteGuardsman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteGuardsman(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteConstructionWorkerMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteConstructionWorkerMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteConstructionWorkerMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteConstructionWorkerMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePrince_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePrince(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePrince",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePrince(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePrincess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePrincess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePrincess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePrincess(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteManInTuxedo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteManInTuxedo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteManInTuxedo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteManInTuxedo(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBrideWithVeil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBrideWithVeil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBrideWithVeil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBrideWithVeil(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMrsClaus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMrsClaus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMrsClaus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMrsClaus(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSanta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSanta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSanta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSanta(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteTurkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteTurkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteTurkey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteTurkey(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRabbit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRabbit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRabbit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRabbit(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteNoGoodWoman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteNoGoodWoman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteNoGoodWoman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteNoGoodWoman(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteOkWoman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteOkWoman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteOkWoman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteOkWoman(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRaisingHandWoman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRaisingHandWoman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRaisingHandWoman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRaisingHandWoman(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBowingMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBowingMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBowingMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBowingMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteManFacepalming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteManFacepalming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteManFacepalming",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteManFacepalming(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteWomanShrugging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteWomanShrugging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteWomanShrugging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteWomanShrugging(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMassageWoman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMassageWoman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMassageWoman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMassageWoman(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteWalkingMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteWalkingMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteWalkingMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteWalkingMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRunningMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRunningMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRunningMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRunningMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteDancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteDancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteDancer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteDancer(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteManDancing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteManDancing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteManDancing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteManDancing(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteDancingWomen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteDancingWomen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteDancingWomen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteDancingWomen(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRainbow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRainbow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRainbow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRainbow(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSkier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSkier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSkier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSkier(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteGolfingMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteGolfingMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteGolfingMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteGolfingMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSurfingMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSurfingMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSurfingMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSurfingMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBasketballMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBasketballMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBasketballMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBasketballMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBikingMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBikingMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBikingMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBikingMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePointUp2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePointUp2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePointUp2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePointUp2(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteVulcanSalute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteVulcanSalute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteVulcanSalute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteVulcanSalute(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMetal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMetal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMetal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMetal(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteCallMeHand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteCallMeHand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteCallMeHand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteCallMeHand(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteThumbsup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteThumbsup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteThumbsup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteThumbsup(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteWave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteWave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteWave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteWave(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteClap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteClap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteClap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteClap(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRaisedHands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRaisedHands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRaisedHands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRaisedHands(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePray",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePray(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteDog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteDog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteDog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteDog(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteCat2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteCat2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteCat2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteCat2(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePig(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteHatchingChick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteHatchingChick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteHatchingChick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteHatchingChick(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSnail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSnail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSnail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSnail(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBacon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBacon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBacon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBacon(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePizza_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePizza(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePizza",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePizza(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteTaco_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteTaco(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteTaco",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteTaco(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBurrito_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBurrito(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBurrito",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBurrito(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRamen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRamen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRamen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRamen(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteDoughnut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteDoughnut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteDoughnut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteDoughnut(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteChampagne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteChampagne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteChampagne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteChampagne(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteTropicalDrink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteTropicalDrink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteTropicalDrink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteTropicalDrink(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBeer(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteTumblerGlass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteTumblerGlass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteTumblerGlass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteTumblerGlass(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteWorldMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteWorldMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteWorldMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteWorldMap(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBeachUmbrella_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBeachUmbrella(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBeachUmbrella",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBeachUmbrella(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMountainSnow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMountainSnow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMountainSnow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMountainSnow(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteCamping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteCamping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteCamping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteCamping(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSteamLocomotive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSteamLocomotive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSteamLocomotive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSteamLocomotive(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteFlightDeparture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteFlightDeparture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteFlightDeparture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteFlightDeparture(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRocket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRocket(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteStar2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteStar2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteStar2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteStar2(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSunBehindSmallCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSunBehindSmallCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSunBehindSmallCloud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSunBehindSmallCloud(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteCloudWithRain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteCloudWithRain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteCloudWithRain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteCloudWithRain(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteFire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteFire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteFire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteFire(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteJackOLantern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteJackOLantern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteJackOLantern",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteJackOLantern(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBalloon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBalloon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBalloon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBalloon(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteTada_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteTada(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteTada",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteTada(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteTrophy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteTrophy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteTrophy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteTrophy(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteIphone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteIphone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteIphone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteIphone(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePager(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteFax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteFax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteFax",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteFax(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBulb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBulb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBulb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBulb(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMoneyWithWings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMoneyWithWings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMoneyWithWings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMoneyWithWings(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteCrystalBall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteCrystalBall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteCrystalBall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteCrystalBall(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteUnderage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteUnderage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteUnderage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteUnderage(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteInterrobang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteInterrobang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteInterrobang",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteInterrobang(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_Vote100_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).Vote100(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/Vote100",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).Vote100(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteCheckeredFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteCheckeredFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteCheckeredFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteCheckeredFlag(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteCrossedSwords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteCrossedSwords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteCrossedSwords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteCrossedSwords(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteFloppyDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteFloppyDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteFloppyDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteFloppyDisk(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_Results_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).Results(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/Results",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).Results(ctx, req.(*ResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VotingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "emojivoto.v1.VotingService",
	HandlerType: (*VotingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VotePoop",
			Handler:    _VotingService_VotePoop_Handler,
		},
		{
			MethodName: "VoteJoy",
			Handler:    _VotingService_VoteJoy_Handler,
		},
		{
			MethodName: "VoteSunglasses",
			Handler:    _VotingService_VoteSunglasses_Handler,
		},
		{
			MethodName: "VoteRelaxed",
			Handler:    _VotingService_VoteRelaxed_Handler,
		},
		{
			MethodName: "VoteStuckOutTongueWinkingEye",
			Handler:    _VotingService_VoteStuckOutTongueWinkingEye_Handler,
		},
		{
			MethodName: "VoteMoneyMouthFace",
			Handler:    _VotingService_VoteMoneyMouthFace_Handler,
		},
		{
			MethodName: "VoteFlushed",
			Handler:    _VotingService_VoteFlushed_Handler,
		},
		{
			MethodName: "VoteMask",
			Handler:    _VotingService_VoteMask_Handler,
		},
		{
			MethodName: "VoteNerdFace",
			Handler:    _VotingService_VoteNerdFace_Handler,
		},
		{
			MethodName: "VoteGhost",
			Handler:    _VotingService_VoteGhost_Handler,
		},
		{
			MethodName: "VoteSkullAndCrossbones",
			Handler:    _VotingService_VoteSkullAndCrossbones_Handler,
		},
		{
			MethodName: "VoteHeartEyesCat",
			Handler:    _VotingService_VoteHeartEyesCat_Handler,
		},
		{
			MethodName: "VoteHearNoEvil",
			Handler:    _VotingService_VoteHearNoEvil_Handler,
		},
		{
			MethodName: "VoteSeeNoEvil",
			Handler:    _VotingService_VoteSeeNoEvil_Handler,
		},
		{
			MethodName: "VoteSpeakNoEvil",
			Handler:    _VotingService_VoteSpeakNoEvil_Handler,
		},
		{
			MethodName: "VoteBoy",
			Handler:    _VotingService_VoteBoy_Handler,
		},
		{
			MethodName: "VoteGirl",
			Handler:    _VotingService_VoteGirl_Handler,
		},
		{
			MethodName: "VoteMan",
			Handler:    _VotingService_VoteMan_Handler,
		},
		{
			MethodName: "VoteWoman",
			Handler:    _VotingService_VoteWoman_Handler,
		},
		{
			MethodName: "VoteOlderMan",
			Handler:    _VotingService_VoteOlderMan_Handler,
		},
		{
			MethodName: "VotePoliceman",
			Handler:    _VotingService_VotePoliceman_Handler,
		},
		{
			MethodName: "VoteGuardsman",
			Handler:    _VotingService_VoteGuardsman_Handler,
		},
		{
			MethodName: "VoteConstructionWorkerMan",
			Handler:    _VotingService_VoteConstructionWorkerMan_Handler,
		},
		{
			MethodName: "VotePrince",
			Handler:    _VotingService_VotePrince_Handler,
		},
		{
			MethodName: "VotePrincess",
			Handler:    _VotingService_VotePrincess_Handler,
		},
		{
			MethodName: "VoteManInTuxedo",
			Handler:    _VotingService_VoteManInTuxedo_Handler,
		},
		{
			MethodName: "VoteBrideWithVeil",
			Handler:    _VotingService_VoteBrideWithVeil_Handler,
		},
		{
			MethodName: "VoteMrsClaus",
			Handler:    _VotingService_VoteMrsClaus_Handler,
		},
		{
			MethodName: "VoteSanta",
			Handler:    _VotingService_VoteSanta_Handler,
		},
		{
			MethodName: "VoteTurkey",
			Handler:    _VotingService_VoteTurkey_Handler,
		},
		{
			MethodName: "VoteRabbit",
			Handler:    _VotingService_VoteRabbit_Handler,
		},
		{
			MethodName: "VoteNoGoodWoman",
			Handler:    _VotingService_VoteNoGoodWoman_Handler,
		},
		{
			MethodName: "VoteOkWoman",
			Handler:    _VotingService_VoteOkWoman_Handler,
		},
		{
			MethodName: "VoteRaisingHandWoman",
			Handler:    _VotingService_VoteRaisingHandWoman_Handler,
		},
		{
			MethodName: "VoteBowingMan",
			Handler:    _VotingService_VoteBowingMan_Handler,
		},
		{
			MethodName: "VoteManFacepalming",
			Handler:    _VotingService_VoteManFacepalming_Handler,
		},
		{
			MethodName: "VoteWomanShrugging",
			Handler:    _VotingService_VoteWomanShrugging_Handler,
		},
		{
			MethodName: "VoteMassageWoman",
			Handler:    _VotingService_VoteMassageWoman_Handler,
		},
		{
			MethodName: "VoteWalkingMan",
			Handler:    _VotingService_VoteWalkingMan_Handler,
		},
		{
			MethodName: "VoteRunningMan",
			Handler:    _VotingService_VoteRunningMan_Handler,
		},
		{
			MethodName: "VoteDancer",
			Handler:    _VotingService_VoteDancer_Handler,
		},
		{
			MethodName: "VoteManDancing",
			Handler:    _VotingService_VoteManDancing_Handler,
		},
		{
			MethodName: "VoteDancingWomen",
			Handler:    _VotingService_VoteDancingWomen_Handler,
		},
		{
			MethodName: "VoteRainbow",
			Handler:    _VotingService_VoteRainbow_Handler,
		},
		{
			MethodName: "VoteSkier",
			Handler:    _VotingService_VoteSkier_Handler,
		},
		{
			MethodName: "VoteGolfingMan",
			Handler:    _VotingService_VoteGolfingMan_Handler,
		},
		{
			MethodName: "VoteSurfingMan",
			Handler:    _VotingService_VoteSurfingMan_Handler,
		},
		{
			MethodName: "VoteBasketballMan",
			Handler:    _VotingService_VoteBasketballMan_Handler,
		},
		{
			MethodName: "VoteBikingMan",
			Handler:    _VotingService_VoteBikingMan_Handler,
		},
		{
			MethodName: "VotePointUp2",
			Handler:    _VotingService_VotePointUp2_Handler,
		},
		{
			MethodName: "VoteVulcanSalute",
			Handler:    _VotingService_VoteVulcanSalute_Handler,
		},
		{
			MethodName: "VoteMetal",
			Handler:    _VotingService_VoteMetal_Handler,
		},
		{
			MethodName: "VoteCallMeHand",
			Handler:    _VotingService_VoteCallMeHand_Handler,
		},
		{
			MethodName: "VoteThumbsup",
			Handler:    _VotingService_VoteThumbsup_Handler,
		},
		{
			MethodName: "VoteWave",
			Handler:    _VotingService_VoteWave_Handler,
		},
		{
			MethodName: "VoteClap",
			Handler:    _VotingService_VoteClap_Handler,
		},
		{
			MethodName: "VoteRaisedHands",
			Handler:    _VotingService_VoteRaisedHands_Handler,
		},
		{
			MethodName: "VotePray",
			Handler:    _VotingService_VotePray_Handler,
		},
		{
			MethodName: "VoteDog",
			Handler:    _VotingService_VoteDog_Handler,
		},
		{
			MethodName: "VoteCat2",
			Handler:    _VotingService_VoteCat2_Handler,
		},
		{
			MethodName: "VotePig",
			Handler:    _VotingService_VotePig_Handler,
		},
		{
			MethodName: "VoteHatchingChick",
			Handler:    _VotingService_VoteHatchingChick_Handler,
		},
		{
			MethodName: "VoteSnail",
			Handler:    _VotingService_VoteSnail_Handler,
		},
		{
			MethodName: "VoteBacon",
			Handler:    _VotingService_VoteBacon_Handler,
		},
		{
			MethodName: "VotePizza",
			Handler:    _VotingService_VotePizza_Handler,
		},
		{
			MethodName: "VoteTaco",
			Handler:    _VotingService_VoteTaco_Handler,
		},
		{
			MethodName: "VoteBurrito",
			Handler:    _VotingService_VoteBurrito_Handler,
		},
		{
			MethodName: "VoteRamen",
			Handler:    _VotingService_VoteRamen_Handler,
		},
		{
			MethodName: "VoteDoughnut",
			Handler:    _VotingService_VoteDoughnut_Handler,
		},
		{
			MethodName: "VoteChampagne",
			Handler:    _VotingService_VoteChampagne_Handler,
		},
		{
			MethodName: "VoteTropicalDrink",
			Handler:    _VotingService_VoteTropicalDrink_Handler,
		},
		{
			MethodName: "VoteBeer",
			Handler:    _VotingService_VoteBeer_Handler,
		},
		{
			MethodName: "VoteTumblerGlass",
			Handler:    _VotingService_VoteTumblerGlass_Handler,
		},
		{
			MethodName: "VoteWorldMap",
			Handler:    _VotingService_VoteWorldMap_Handler,
		},
		{
			MethodName: "VoteBeachUmbrella",
			Handler:    _VotingService_VoteBeachUmbrella_Handler,
		},
		{
			MethodName: "VoteMountainSnow",
			Handler:    _VotingService_VoteMountainSnow_Handler,
		},
		{
			MethodName: "VoteCamping",
			Handler:    _VotingService_VoteCamping_Handler,
		},
		{
			MethodName: "VoteSteamLocomotive",
			Handler:    _VotingService_VoteSteamLocomotive_Handler,
		},
		{
			MethodName: "VoteFlightDeparture",
			Handler:    _VotingService_VoteFlightDeparture_Handler,
		},
		{
			MethodName: "VoteRocket",
			Handler:    _VotingService_VoteRocket_Handler,
		},
		{
			MethodName: "VoteStar2",
			Handler:    _VotingService_VoteStar2_Handler,
		},
		{
			MethodName: "VoteSunBehindSmallCloud",
			Handler:    _VotingService_VoteSunBehindSmallCloud_Handler,
		},
		{
			MethodName: "VoteCloudWithRain",
			Handler:    _VotingService_VoteCloudWithRain_Handler,
		},
		{
			MethodName: "VoteFire",
			Handler:    _VotingService_VoteFire_Handler,
		},
		{
			MethodName: "VoteJackOLantern",
			Handler:    _VotingService_VoteJackOLantern_Handler,
		},
		{
			MethodName: "VoteBalloon",
			Handler:    _VotingService_VoteBalloon_Handler,
		},
		{
			MethodName: "VoteTada",
			Handler:    _VotingService_VoteTada_Handler,
		},
		{
			MethodName: "VoteTrophy",
			Handler:    _VotingService_VoteTrophy_Handler,
		},
		{
			MethodName: "VoteIphone",
			Handler:    _VotingService_VoteIphone_Handler,
		},
		{
			MethodName: "VotePager",
			Handler:    _VotingService_VotePager_Handler,
		},
		{
			MethodName: "VoteFax",
			Handler:    _VotingService_VoteFax_Handler,
		},
		{
			MethodName: "VoteBulb",
			Handler:    _VotingService_VoteBulb_Handler,
		},
		{
			MethodName: "VoteMoneyWithWings",
			Handler:    _VotingService_VoteMoneyWithWings_Handler,
		},
		{
			MethodName: "VoteCrystalBall",
			Handler:    _VotingService_VoteCrystalBall_Handler,
		},
		{
			MethodName: "VoteUnderage",
			Handler:    _VotingService_VoteUnderage_Handler,
		},
		{
			MethodName: "VoteInterrobang",
			Handler:    _VotingService_VoteInterrobang_Handler,
		},
		{
			MethodName: "Vote100",
			Handler:    _VotingService_Vote100_Handler,
		},
		{
			MethodName: "VoteCheckeredFlag",
			Handler:    _VotingService_VoteCheckeredFlag_Handler,
		},
		{
			MethodName: "VoteCrossedSwords",
			Handler:    _VotingService_VoteCrossedSwords_Handler,
		},
		{
			MethodName: "VoteFloppyDisk",
			Handler:    _VotingService_VoteFloppyDisk_Handler,
		},
		{
			MethodName: "Results",
			Handler:    _VotingService_Results_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/Voting.proto",
}
